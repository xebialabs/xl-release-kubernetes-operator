"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[732],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=l,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(f,r(r({ref:t},d),{},{components:n})):a.createElement(f,r({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5157:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=n(7462),l=n(3366),o=(n(7294),n(3905)),r=["components"],i={sidebar_position:10},s="Assigning Pods to Nodes",p={unversionedId:"manual/assigning_pods_to_nodes",id:"manual/assigning_pods_to_nodes",isDocsHomePage:!1,title:"Assigning Pods to Nodes",description:"Prerequisites",source:"@site/docs/manual/assigning_pods_to_nodes.md",sourceDirName:"manual",slug:"/manual/assigning_pods_to_nodes",permalink:"/xl-release-kubernetes-operator/docs/manual/assigning_pods_to_nodes",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Setting up custom namespace",permalink:"/xl-release-kubernetes-operator/docs/manual/setting-up-custom-namespace"},next:{title:"[Deprecated] How to change namespace in case there is release already running in the default namespace (parallel option)",permalink:"/xl-release-kubernetes-operator/docs/manual/change-namespace-for-xlr-10.3"}},d=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Intro",id:"intro",children:[],level:2},{value:"Removing Pods from Specific Node",id:"removing-pods-from-specific-node",children:[],level:2},{value:"Assigning XLR Pods to the Specific Nodes",id:"assigning-xlr-pods-to-the-specific-nodes",children:[],level:2}],c={toc:d};function u(e){var t=e.components,n=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"assigning-pods-to-nodes"},"Assigning Pods to Nodes"),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The kubectl command-line tool"),(0,o.kt)("li",{parentName:"ul"},"Access to a Kubernetes cluster with installed Release")),(0,o.kt)("p",null,"Tested with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"xl-release 22.2.0-x"),(0,o.kt)("li",{parentName:"ul"},"xl-cli 10.3.9"),(0,o.kt)("li",{parentName:"ul"},"Azure cluster")),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"All running pods, deployed with xl-release, have no defined:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"pod tolerations"),(0,o.kt)("li",{parentName:"ul"},"node labels in the ",(0,o.kt)("inlineCode",{parentName:"li"},"nodeSelector")),(0,o.kt)("li",{parentName:"ul"},"node (anti-)affinity")),(0,o.kt)("p",null,"If you need to apply on pods custom scheduling to the appropriate node you can use following files to change that in your operator package:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"digitalai-release/kubernetes/dairelease_cr.yaml")),(0,o.kt)("p",{parentName:"li"},"In the file search all places where is ",(0,o.kt)("inlineCode",{parentName:"p"},"tolerations: []")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeSelector: {}")," and add appropriate values there. ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"digitalai-release/kubernetes/template/deployment.yaml")),(0,o.kt)("p",{parentName:"li"},"In the file add to the path ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.template.spec")," appropriate values with ",(0,o.kt)("inlineCode",{parentName:"p"},"tolerations: []")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeSelector: {}"),"."))),(0,o.kt)("p",null,"In next sections we will display few cases that could be applied."),(0,o.kt)("h2",{id:"removing-pods-from-specific-node"},"Removing Pods from Specific Node"),(0,o.kt)("p",null,"If you need that specific node should not run any xl-release pods, you can apply taint to that node with effect ",(0,o.kt)("inlineCode",{parentName:"p"},"NoExecute"),", for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl taint nodes node_name key1=value1:NoExecute\n")),(0,o.kt)("p",null,"All pods that do not have that specific toleration will be immediately removed from nodes with that specific taint."),(0,o.kt)("h2",{id:"assigning-xlr-pods-to-the-specific-nodes"},"Assigning XLR Pods to the Specific Nodes"),(0,o.kt)("p",null,"If you need to have just XLR pods, and no other pod, on the specific node you need to do following, for example:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add to nodes specific taints that will remove all other pods without same tolerations: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl taint nodes node_name app=dai:NoExecute\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Add label to the same nodes so XLR when deployed use just that specific nodes:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl label nodes node_name app_label=dai_label\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"digitalai-release/kubernetes/dairelease_cr.yaml")," update all places with ",(0,o.kt)("inlineCode",{parentName:"li"},"tolerations"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'tolerations:\n- key: "app"\n  operator: "Equal"\n  value: "dai"\n  effect: "NoExecute"\n')),(0,o.kt)("p",null,"And update all places with ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeSelector"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"nodeSelector:\n  app_label: dai_label\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"digitalai-release/kubernetes/template/deployment.yaml")," add following lines under ",(0,o.kt)("inlineCode",{parentName:"li"},"spec.template.spec"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'tolerations:\n- key: "app"\n  operator: "Equal"\n  value: "dai"\n  effect: "NoExecute"\nnodeSelector:\n  app_label: dai_label\n')))}u.isMDXComponent=!0}}]);