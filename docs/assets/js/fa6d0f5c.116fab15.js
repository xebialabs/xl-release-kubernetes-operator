"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[638],{7676:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return m},default:function(){return c}});var r=a(7462),l=a(3366),n=(a(7294),a(3905)),s=["components"],p={sidebar_position:7},i="Adding truststore files",o={unversionedId:"manual/updating-truststore-files",id:"manual/updating-truststore-files",isDocsHomePage:!1,title:"Adding truststore files",description:"Prerequisites",source:"@site/docs/manual/updating-truststore-files.md",sourceDirName:"manual",slug:"/manual/updating-truststore-files",permalink:"/xl-release-kubernetes-operator/docs/manual/updating-truststore-files",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Updating configuration files",permalink:"/xl-release-kubernetes-operator/docs/manual/updating-configuration-files"},next:{title:"Setting up custom namespace",permalink:"/xl-release-kubernetes-operator/docs/manual/setting-up-custom-namespace"}},m=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Adding truststore file generic example for Release.",id:"adding-truststore-file-generic-example-for-release",children:[],level:2},{value:"Trust an Deploy server&#39;s certificate in Release",id:"trust-an-deploy-servers-certificate-in-release",children:[],level:2},{value:"To create a dedicated truststore for Release:",id:"to-create-a-dedicated-truststore-for-release",children:[],level:2},{value:"Update xlr-wrapper-linux.conf/xlr-wrapper-win.conf, depending on your system.",id:"update-xlr-wrapper-linuxconfxlr-wrapper-winconf-depending-on-your-system",children:[],level:2},{value:"Update deployit-defaults.properties.",id:"update-deployit-defaultsproperties",children:[],level:2}],u={toc:m};function c(e){var t=e.components,p=(0,l.Z)(e,s);return(0,n.kt)("wrapper",(0,r.Z)({},u,p,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"adding-truststore-files"},"Adding truststore files"),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Linux environment"),(0,n.kt)("li",{parentName:"ul"},"The kubectl command-line tool"),(0,n.kt)("li",{parentName:"ul"},"The yq command-line tool (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mikefarah/yq/releases"},"Use the latest binary"),")"),(0,n.kt)("li",{parentName:"ul"},"Access to a Kubernetes cluster with installed Release")),(0,n.kt)("h2",{id:"adding-truststore-file-generic-example-for-release"},"Adding truststore file generic example for Release."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Add certificate to truststore (XLRTruststore.jks)"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"}," keytool -import -alias exampleCert -file exampleCert.cer -keystore XLRTruststore.jks\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'Create secret yaml "xlr-trust-store_secret.yaml"'),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"cat XLRTruststore.jsk | base64"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"}," apiVersion: v1\n kind: Secret\n metadata:\n name: xlr-secret-store\n namespace: default\n data:\n   XLRTruststore.jks: \"<base 64 from previous command here 'cat XLRTruststore.jks | base64'>\"       \n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"}," kubectl apply -f xlr-trust-store_secret.yaml\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"By editing STS, create volumemount and volumes for the created secret in above step."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"   kubectl get statefulset.apps/dai-xlr-digitalai-release -o yaml > release.yaml\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"update the volume mount and volume for secret.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"volume mount",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    volumeMounts:\n    - mountPath: /mnt/secrets\n       name: xlr-secret-store-volume\n       readOnly: true\n"))),(0,n.kt)("li",{parentName:"ul"},"volume",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"     volumes:\n     - name: xlr-secret-store-volume\n       secret:\n          secretName: xlr-secret-store\n          items:\n          - key: XLRTruststore.jks\n            path: XLRTruststore.jks\n          - key: XLDKeystore.jks\n            path: XLDKeystore.jks\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"  kubectl apply -f release.yaml\n"))))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Update the xlr-wrapper-linux.conf/xlr-wrapper-win.conf as mentioned ",(0,n.kt)("a",{parentName:"p",href:"#update-xlr-wrapper-linuxconfxlr-wrapper-winconf-depending-on-your-system"},"in the section")))),(0,n.kt)("h2",{id:"trust-an-deploy-servers-certificate-in-release"},"Trust an Deploy server's certificate in Release"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If you configured your Deploy server to use a self-signed certificate and then added the server to Release, you will notice that testing the connection fails. with the following error: Can't connect to XL Deploy Server."),(0,n.kt)("li",{parentName:"ul"},"To instruct Release to trust the Deploy server certificate, you must configure a truststore for Release.")),(0,n.kt)("h2",{id:"to-create-a-dedicated-truststore-for-release"},"To create a dedicated truststore for Release:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Export the self-signed server certificate from XL_DEPLOY_SERVER_HOME/conf."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"keytool -export -keystore XLDKeystore.jks -alias jetty -file XLDeployServerCert.cer"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"If Deploy is running in k8s cluster with tls enabled , then get the certificate of ingress."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"eg: ",(0,n.kt)("a",{parentName:"li",href:"https://xld-operator-test.germanywestcentral.cloudapp.azure.com/"},"https://xld-operator-test.germanywestcentral.cloudapp.azure.com/"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Download the certificate from browser and name it as XLDeployServerCert.cer"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Import the certificate, as a trusted certificate, into a separate truststore for Release:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"keytool -import -alias XLDeployServerCert -file XLDeployServerCert.cer -keystore XLRTruststore.jks\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Import all certificates from the JRE global truststore:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"   keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts \\\n   -srcstoretype JKS \\\n   -destkeystore XLDKeystore.jks \\\n   -deststoretype JKS \\\n   -srcstorepass changeit \\\n   -deststorepass changeit     \n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'Create secret yaml "xlr-trust-store_secret.yaml"'),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"cat XLDKeystore.jks | base64")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"cat XLRTruststore.jsk | base64")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\nmetadata:\nname: xlr-secret-store\nnamespace: default\ndata:\n  XLRTruststore.jks: \"<base 64 from previous command here 'cat XLRKeystore.jks | base64'>\"\n  XLDKeystore.jks: \"<base 64 from previous command here 'cat XLDTruststore.jsk | base64'>\"\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f xlr-trust-store_secret.yaml\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get secret xlr-secret-store\n[sishwarya@localhost xl-release-kubernetes-operator] (ENG-9190) $ kubectl get secret xlr-secret-store\n NAME               TYPE     DATA   AGE\n xlr-secret-store   Opaque   2      3h17m\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create volumemount and volumes for the created secret."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("img",{alt:"Before volume mount",src:a(3763).Z})),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get statefulset.apps/dai-xlr-digitalai-release -o yaml > release.yaml\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"update the volume mount and volume for secret.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"volume mount",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    volumeMounts:\n    - mountPath: /mnt/secrets\n       name: xlr-secret-store-volume\n       readOnly: true\n"))),(0,n.kt)("li",{parentName:"ul"},"volume ",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"     volumes:\n     - name: xlr-secret-store-volume\n       secret:\n          secretName: xlr-secret-store\n          items:\n          - key: XLRTruststore.jks\n            path: XLRTruststore.jks\n          - key: XLDKeystore.jks\n            path: XLDKeystore.jks\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"    kubectl apply -f release.yaml\n"))))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("img",{alt:" Post edit of STS",src:a(4507).Z}))))),(0,n.kt)("h2",{id:"update-xlr-wrapper-linuxconfxlr-wrapper-winconf-depending-on-your-system"},"Update xlr-wrapper-linux.conf/xlr-wrapper-win.conf, depending on your system."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Configure Release to use the truststore.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Get current xlr-wrapper-linux.conf file from the release server node:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl cp dai-xlr-digitalai-release-0:/opt/xebialabs/xl-release-server/conf/xlr-wrapper-linux.conf ./xlr-wrapper-linux.conf\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create following template file to append to it the retrieved ",(0,n.kt)("inlineCode",{parentName:"p"},"./xlr-wrapper-linux.conf"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f echo 'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: xl-release-wrapper-config-map\n  labels:\n    app: digitalai-release\ndata:\n  xlr-wrapper-linux.conf: |' > config-patch-xl-release-wrapper.yaml.template\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Merge the files:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f cat config-patch-xl-release-wrapper.yaml.template > config-patch-xl-release-wrapper.yaml\n\u276f sed -e 's/^/     /' xlr-wrapper-linux.conf >> config-patch-xl-release-wrapper.yaml\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Change the config in the ",(0,n.kt)("inlineCode",{parentName:"p"},"config-patch-xl-release-wrapper.yaml"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Add the following line, where \u2018X\u2019 is the next number in the wrapper.java.additional list:\nwrapper.java.additional.X=-Djavax.net.ssl.trustStore=/mnt/secret/XLRTruststore.jks\nwrapper.java.additional.X+1=-Djavax.net.ssl.trustStorePassword=changeit\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create the config map with ",(0,n.kt)("inlineCode",{parentName:"p"},"config-patch-xl-release-wrapper.yaml"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl create -f config-patch-xl-release-wrapper.yaml\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Get all statefulsets (release statefulset will be suffixed with ",(0,n.kt)("inlineCode",{parentName:"p"},"-release"),"):"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl get sts -o name\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Change the statefulset for the release server by adding volume mounts and volumes:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'\u276f kubectl get statefulset.apps/dai-xlr-digitalai-release -o yaml \\\n    | yq eval \'.spec.template.spec.containers[0].volumeMounts += {\n        "mountPath": "/opt/xebialabs/xl-release-server/conf/xlr-wrapper-linux.conf",\n        "name": "xl-release-wrapper-volume",\n        "subPath": "xlr-wrapper-linux.conf"\n      }\' - \\\n    | yq eval \'.spec.template.spec.volumes += [{\n        "name": "xl-release-wrapper-volume",\n        "configMap": {\n          "name": "xl-release-wrapper-config-map"\n        }\n      }]\' - \\\n    | kubectl replace -f -\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"post updated xlr-wrapper-linux.conf",src:a(4121).Z})))),(0,n.kt)("h2",{id:"update-deployit-defaultsproperties"},"Update deployit-defaults.properties."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"In order to verify self signed certificates for Release and Deploy, a public certificate of the Deploy Server must be supplied.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Get current deployit-defaults.properties file from the release server node:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl cp dai-xlr-digitalai-release-0:/opt/xebialabs/xl-release-server/conf/deployit-defaults.properties ./deployit-defaults.properties\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create following template file to append to it the retrieved ",(0,n.kt)("inlineCode",{parentName:"p"},"./deployit-defaults.properties"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f echo 'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: xlr-default-properties-config-map\n  labels:\n    app: digitalai-release\ndata:\n  deployit-defaults.properties: |' > config-patch-xlr-default-properties.yaml.template\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Merge the files:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f cat config-patch-xlr-default-properties.yaml.template > config-patch-xlr-default-properties.yaml\n\u276f sed -e 's/^/     /' deployit-defaults.properties >> config-patch-xlr-default-properties.yaml\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Change the config in the ",(0,n.kt)("inlineCode",{parentName:"p"},"config-patch-xlr-default-properties.yaml"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-text"},"update following line by specifying the location of the public certificate of deploy\nxldeploy.XLDeployServer.verifySSL\n\n For e.g. xldeploy.XLDeployServer.verifySSL=/path/to/the/public/cert/of/Deploy    \n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create the config map with ",(0,n.kt)("inlineCode",{parentName:"p"},"config-patch-xlr-default-properties.yaml"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl create -f config-patch-xl-release-conf.yaml\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Get all statefulsets (release statefulset will be suffixed with ",(0,n.kt)("inlineCode",{parentName:"p"},"-release"),"):"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"\u276f kubectl get sts -o name\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Change the statefulset for the release server by adding volume mounts and volumes:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'\u276f kubectl get statefulset.apps/dai-xlr-digitalai-release -o yaml \\\n| yq eval \'.spec.template.spec.containers[0].volumeMounts += {\n    "mountPath": "/opt/xebialabs/xl-release-server/conf/deployit-defaults.properties",\n    "name": "xlr-default-properties-volume",\n    "subPath": "deployit-defaults.properties"\n  }\' - \\\n| yq eval \'.spec.template.spec.volumes += [{\n    "name": "xlr-default-properties-volume",\n    "configMap": {\n      "name": "xlr-default-properties-config-map"\n    }\n  }]\' - \\\n| kubectl replace -f -\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"post updated of deployit-defaults.properties",src:a(6971).Z}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"Deploy Server available",src:a(5610).Z})))))}c.isMDXComponent=!0},4507:function(e,t,a){t.Z=a.p+"assets/images/after_secret_mount-81d0c8f3334de8adb7d200a4e8539aea.png"},3763:function(e,t,a){t.Z=a.p+"assets/images/before_secret_mount-8cc001bcab2dde0d0cf456099711f828.png"},5610:function(e,t,a){t.Z=a.p+"assets/images/deploy_server-f3fd8e1a78ac71c6ad846b1f18c382bc.png"},6971:function(e,t,a){t.Z=a.p+"assets/images/deployit-default-43acf2849aea1e48c92f2530208a7307.png"},4121:function(e,t,a){t.Z=a.p+"assets/images/truststore_configmap-833172b481fa82c58e3b5584eba9cf28.png"}}]);