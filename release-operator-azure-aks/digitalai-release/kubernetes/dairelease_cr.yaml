apiVersion: xlr.digital.ai/v1alpha1
kind: DigitalaiRelease
metadata:
  name: dai-xlr
spec:
  AdminPassword: admin
  HealthPeriodScans: 10
  HealthProbeFailureThreshold: 12
  HealthProbes: true
  HealthProbesLivenessTimeout: 60
  HealthProbesReadinessTimeout: 60
  ImagePullPolicy: Always
  ImageRepository: xebialabsunsupported/xl-release
  ImageTag: "10.2.19"
  ## xebialabs/tiny-tools image version
  ## Ref: https://hub.docker.com/r/xebialabs/tiny-tools/tags
  TinyToolsImageRepository: "xebialabs/tiny-tools"
  TinyToolsImageTag: "22.2.0"
  # Secrets must be manually created in the namespace
  # ImagePullSecret: xlRelease
  K8sSetup:
    Platform: AzureAKS
  KeystorePassphrase: <Provide store pass for the keystore>
  Persistence:
    AccessMode: ReadWriteOnce
    Annotations: {}
    Enabled: true
    Size: 5Gi
    # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
    StorageClass: < provide the storageClass for DAI-Release>
  # https://docs.xebialabs.com/v.9.8/release/how-to/update-the-xl-release-digital-certificate/#view-the-certificate
  # Convert repository-keystore.jceks files content to base64
  # ( cat repository-keystore.jceks | base64 -w 0 ) and put the output here
  RepositoryKeystore: <Provide repositoryKeystore in base64 encoded form>
  UseExistingDB:
    Enabled: false
    # If you want to use a existing database, change 'postgresql.install' to 'false'.
    # Set 'UseExistingDB.Enabled' to 'true'.Uncomment the following lines and provide the values.
    # XLR_DB_URL:
    # XLR_DB_USER:
    # XLR_DB_PASS:
    # XLR_REPORT_DB_URL:
    # XLR_REPORT_DB_USER:
    # XLR_REPORT_DB_PASS:
  UseExistingMQ:
    Enabled: false
    # If you want to use a existing Message Queue, change 'rabbitmq.install' to 'false'.
    # Set 'UseExistingMQ.Enabled' to 'true'.Uncomment the following lines and provide the values.
    # XLR_TASK_QUEUE_USERNAME:
    # XLR_TASK_QUEUE_PASSWORD:
    # XLR_TASK_QUEUE_NAME:
    # XLR_TASK_QUEUE_URL:
  affinity: {}
  release:
    configurationManagement:
      configuration:
        enabled: true
        resetFiles: ## Resets part of the configuration files and license
          - xl-release-license.lic
          - xlr-wrapper-linux.conf
          - jmx-exporter.yaml
  haproxy-ingress:
    controller:
      affinity: {}
      autoscaling:
        customMetrics: []
        enabled: false
      config: {}
      daemonset:
        hostPorts:
          http: 80
          https: 443
          tcp: []
        useHostPort: false
      defaultBackendService: ""
      dnsPolicy: ClusterFirst
      enableStaticPorts: true
      extraArgs: {}
      extraEnvs: []
      healthzPort: 10253
      hostNetwork: false
      image:
        pullPolicy: IfNotPresent
        repository: quay.io/jcmoraisjr/haproxy-ingress
        tag: v0.9.2
      imagePullSecrets: []
      ingressClass: haproxy
      initContainers: []
      kind: Deployment
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        path: /healthz
        periodSeconds: 10
        port: 10253
        successThreshold: 1
        timeoutSeconds: 1
      logs:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          repository: whereisaaron/kube-syslog-sidecar
          tag: latest
        resources: {}
      metrics:
        enabled: false
        extraArgs: {}
        image:
          pullPolicy: IfNotPresent
          repository: quay.io/prometheus/haproxy-exporter
          tag: v0.10.0
        resources: {}
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: []
          loadBalancerIP: ""
          loadBalancerSourceRanges: []
          servicePort: 9101
          type: ClusterIP
      minAvailable: 1
      minReadySeconds: 0
      nodeSelector: {}
      podAffinity: {}
      podAnnotations: {}
      podLabels: {}
      priorityClassName: ""
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        path: /healthz
        periodSeconds: 10
        port: 10253
        successThreshold: 1
        timeoutSeconds: 1
      replicaCount: 1
      resources: {}
      securityContext: {}
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        externalTrafficPolicy: Local
        healthCheckNodePort: 0
        httpPorts:
          - port: 80
            targetPort: http
        httpsPorts:
          - port: 443
            targetPort: https
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        type: LoadBalancer
      stats:
        enabled: false
        port: 1936
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: []
          loadBalancerIP: ""
          loadBalancerSourceRanges: []
          servicePort: 1936
          type: ClusterIP
      tcp: {}
      template: ""
      terminationGracePeriodSeconds: 60
      tolerations: []
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 1
        type: RollingUpdate
    defaultBackend:
      affinity: {}
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: gcr.io/google_containers/defaultbackend
        tag: "1.0"
      minAvailable: 1
      name: default-backend
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      replicaCount: 1
      resources:
        limits:
          cpu: 10m
          memory: 20Mi
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        name: ingress-default-backend
        servicePort: 8080
        type: ClusterIP
      tolerations: []
    fullnameOverride: ""
    global: {}
    install: false
    nameOverride: ""
    rbac:
      create: true
      secret:
        write: false
      security:
        enable: false
    serviceAccount:
      create: true
      name: null
  ingress:
    Enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/session-cookie-name: JSESSIONID
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    hosts:
      - <Provode DNS name for accessing UI of Digital.ai Release>
    path: /xl-release(/|$)(.*)
    # If you want to use TLS configuration uncomment the following lines and provide correct values.
    # You need to create secret, and provide the name under 'secretName'
    # tls:
    #   - secretName: NAME_OF_THE_TLS_SECRET
    #     hosts:
    #       - FQDN_MATCH_WITH_CERT_CN
  nginx-ingress-controller:
    addHeaders: {}
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
    command: []
    common:
      exampleValue: common-chart
      global: {}
    commonAnnotations: {}
    commonLabels: {}
    config: {}
    configMapNamespace: ""
    containerPorts:
      http: 80
      https: 443
      metrics: 10254
    containerSecurityContext:
      allowPrivilegeEscalation: true
      capabilities:
        add:
          - NET_BIND_SERVICE
        drop:
          - ALL
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customTemplate:
      configMapKey: ""
      configMapName: ""
    daemonset:
      hostPorts:
        http: 80
        https: 443
      useHostPort: false
    defaultBackend:
      affinity: {}
      containerPort: 8080
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      enabled: true
      extraArgs: {}
      hostAliases: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.19.6-debian-10-r44
      livenessProbe:
        enabled: true
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      service:
        port: 80
        type: ClusterIP
      tolerations: []
    defaultBackendService: ""
    dhParam: null
    dnsPolicy: ClusterFirst
    electionID: ingress-controller-leader
    extraArgs: {}
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: null
    extraEnvVarsSecret: null
    extraVolumeMounts: []
    extraVolumes: []
    global: {}
    hostAliases: []
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/nginx-ingress-controller
      tag: 0.43.0-debian-10-r34
    ingressClass: nginx
    initContainers: {}
    install: true
    kind: Deployment
    lifecycle: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    maxmindLicenseKey: ""
    metrics:
      enabled: false
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations:
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: "true"
        port: 9913
        type: ClusterIP
      serviceMonitor:
        enabled: false
        interval: 30s
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    podSecurityPolicy:
      enabled: false
    priorityClassName: ""
    proxySetHeaders: {}
    publishService:
      enabled: false
      pathOverride: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    reportNodeInternalIp: false
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    scope:
      enabled: false
    service:
      annotations: {}
      externalIPs: []
      externalTrafficPolicy: ""
      healthCheckNodePort: 0
      labels: {}
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        https: ""
        tcp: {}
        udp: {}
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
    serviceAccount:
      annotations: {}
      create: true
    sidecars: {}
    tcp: {}
    tcpConfigMapNamespace: ""
    terminationGracePeriodSeconds: 60
    tolerations: []
    topologySpreadConstraints: []
    udp: {}
    udpConfigMapNamespace: ""
    updateStrategy: {}
  nodeSelector: {}
  oidc:
    accessToken:
      audience:
      enable: false
      issuer:
      jwsAlg:
      keyRetrievalUri:
      secretKey:
    accessTokenUri:
    clientAuthMethod:
    clientId:
    clientSecret:
    emailClaim:
    enabled: false
    externalIdClaim:
    fullNameClaim:
    idTokenJWSAlg:
    issuer:
    keyRetrievalUri:
    logoutUri:
    postLogoutRedirectUri:
    proxyHost:
    proxyPort:
    redirectUri:
    rolesClaim:
    scopes: ["openid"]
    userAuthorizationUri:
    userNameClaim:
  postgresql:
    affinity: {}
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        postgresql: {}
    commonAnnotations: {}
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    extraDeploy: []
    extraEnv: []
    global:
      postgresql: {}
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.9.0-debian-10-r48
    initdbScriptsSecret: postgresql-init-sql-xlr
    install: true
    ldap:
      baseDN: ""
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: false
      url: ""
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    master:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      priorityClassName: ""
      service: {}
      sidecars: []
      tolerations: []
    masterAsStandBy:
      enabled: false
    metrics:
      enabled: false
      extraEnvVars: {}
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.8.0-debian-10-r242
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    nodeSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: null
      mountPath: /bitnami/postgresql
      size: 50Gi
      # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
      storageClass: <Provode Storage Class to be defined for PostgreSQL>
      subPath: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDbUserConnectionLimit: null
    postgresqlExtendedConf:
      listenAddresses: '''*'''
      maxConnections: "500"
    postgresqlMaxConnections: null
    postgresqlPassword: postgres
    postgresqlPghbaRemoveFilters: null
    postgresqlPostgresConnectionLimit: null
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlStatementTimeout: null
    postgresqlTcpKeepalivesCount: null
    postgresqlTcpKeepalivesIdle: null
    postgresqlTcpKeepalivesInterval: null
    postgresqlUsername: postgres
    psp:
      create: false
    rbac:
      create: false
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      slaveReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
    shmVolume:
      chmod:
        enabled: true
      enabled: true
    slave:
      affinity: {}
      annotations: {}
      extraInitContainers: |
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeSelector: {}
      persistence:
        enabled: true
      podAnnotations: {}
      podLabels: {}
      priorityClassName: ""
      resources: {}
      service: {}
      sidecars: []
      tolerations: []
    tls:
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      enabled: false
      preferServerCiphers: true
    tolerations: []
    updateStrategy:
      type: RollingUpdate
    volumePermissions:
      enabled: false
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: buster
      securityContext:
        runAsUser: 0
  rabbitmq:
    advancedConfiguration: ""
    affinity: {}
    auth:
      erlangCookie: RELEASERABBITMQCLUSTER
      password: guest
      tls:
        caCertificate: ""
        enabled: false
        failIfNoPeerCert: true
        serverCertificate: ""
        serverKey: ""
        sslOptionsVerify: verify_peer
      username: guest
    clusterDomain: cluster.local
    clustering:
      addressType: hostname
      forceBoot: false
      rebalance: false
    common:
      exampleValue: common-chart
      global: {}
    configuration: |-
      ## Username and password
      default_user = {{ .Values.auth.username }}
      default_pass = CHANGEME
      ## Clustering
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
      cluster_formation.node_cleanup.interval = 10
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      # queue master locator
      queue_master_locator = min-masters
      # enable guest user
      loopback_users.guest = false
      {{ tpl .Values.extraConfiguration . }}
      {{- if .Values.auth.tls.enabled }}
      ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
      listeners.ssl.default = {{ .Values.service.tlsPort }}
      ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
      ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
      ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
      ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
      {{- end }}
      {{- if .Values.ldap.enabled }}
      auth_backends.1 = rabbit_auth_backend_ldap
      auth_backends.2 = internal
      {{- range $index, $server := .Values.ldap.servers }}
      auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
      {{- end }}
      auth_ldap.port = {{ .Values.ldap.port }}
      auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
      {{- if .Values.ldap.tls.enabled }}
      auth_ldap.use_ssl = true
      {{- end }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
      ## Prometheus metrics
      prometheus.tcp.port = 9419
      {{- end }}
      {{- if .Values.memoryHighWatermark.enabled }}
      ## Memory Threshold
      total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
      vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
      {{- end }}
    containerSecurityContext: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraConfiguration: |
      load_definitions = /app/xlr-load_definition.json
      raft.wal_max_size_bytes = 1048576
    extraContainerPorts: []
    extraEnvVars: []
    extraPlugins: rabbitmq_amqp1_0
    extraSecrets:
      xlr-load-definition:
        xlr-load_definition.json: |
          {
          "users": [
            {
                "name": "{{ .Values.auth.username }}",
                "password": "{{ .Values.auth.password }}",
                "tags": "administrator"
            }
            ],
          "vhosts": [
            {
              "name": "/"
            }
            ],
            "permissions": [
            {
              "user": "{{ .Values.auth.username }}",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
            ],
          "global_parameters": [
            {
              "name": "cluster_name",
              "value": ""
            }
            ],
           "policies": [
              {
                "name": "ha-all",
                "apply-to": "all",
                "pattern": ".*",
                "vhost": "/",
                "definition": {
                  "ha-mode": "all",
                  "ha-sync-mode": "automatic",
                  "ha-sync-batch-size": 1
                }
              }
            ]
          }
    extraVolumeMounts: []
    extraVolumes: []
    global: {}
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/rabbitmq
      tag: 3.8.11-debian-10-r0
    ingress:
      annotations: {}
      certManager: false
      enabled: false
      hostname: rabbitmq.local
      path: /
      secrets: []
      tls: false
    initContainers: {}
    install: true
    ldap:
      enabled: false
      port: "389"
      servers: []
      tls:
        enabled: false
      user_dn_pattern: cn=${username},dc=example,dc=org
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    loadDefinition:
      enabled: true
      existingSecret: xlr-load-definition
    logs: '-'
    memoryHighWatermark:
      enabled: false
      type: relative
      value: 0.4
    metrics:
      enabled: false
      plugins: rabbitmq_prometheus
      podAnnotations:
        prometheus.io/port: '{{ .Values.service.metricsPort }}'
        prometheus.io/scrape: "true"
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: 30s
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      minAvailable: 1
    persistence:
      accessMode: ReadWriteOnce
      enabled: true
      selector: {}
      size: 8Gi
      # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
      storageClass: <Storage Class to be defined for RabbitMQ>
      volumes: null
    plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      fsGroup: 1001
      runAsUser: 1001
    priorityClassName: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      distPort: 25672
      distPortName: dist
      epmdPortName: epmd
      externalTrafficPolicy: Cluster
      extraPorts: []
      labels: {}
      managerPort: 15672
      managerPortName: http-stats
      metricsPort: 9419
      metricsPortName: metrics
      port: 5672
      portName: amqp
      tlsPort: 5671
      tlsPortName: amqp-ssl
      type: ClusterIP
    serviceAccount:
      create: true
    sidecars: {}
    statefulsetLabels: {}
    terminationGracePeriodSeconds: 120
    tolerations: []
    ulimitNofiles: "65536"
    updateStrategyType: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: Always
        pullSecrets: []
        registry: docker.io
        repository: bitnami/minideb
        tag: buster
      resources:
        limits: {}
        requests: {}
  replicaCount: 3
  resources: {}
  tolerations: []
  # Convert xl-release.lic files content to base64 ( cat xl-release.lic | base64 -w 0 ) and put the output here
  xlrLicense: <Provide license file for Digital.ai Release should be converted to the base64 form>
