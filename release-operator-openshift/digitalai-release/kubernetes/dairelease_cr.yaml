apiVersion: xlrocp.digital.ai/v1alpha1
kind: DigitalaiReleaseOcp
metadata:
  name: dai-ocp-xlr
spec:
  AdminPassword: admin
  HealthPeriodScans: 10
  HealthProbeFailureThreshold: 12
  HealthProbes: true
  HealthProbesLivenessTimeout: 60
  HealthProbesReadinessTimeout: 60
  ImagePullPolicy: Always
  ImageRepository: xebialabsunsupported/xl-release
  ImageTag: "23.3.0-1003.113"
  ## xebialabs/tiny-tools image version
  ## Ref: https://hub.docker.com/r/xebialabs/tiny-tools/tags
  TinyToolsImageRepository: "xebialabs/tiny-tools"
  TinyToolsImageTag: "22.2.0"
  KeystorePassphrase: <Provide store pass for the keystore>
  GenerateXlConfig: true
  MetricsEnabled: false
  UseIpAsHostname: false
  ForceRemoveMissingTypes: false
  Persistence:
    AccessMode: ReadWriteOnce
    Annotations:
      helm.sh/resource-policy: "keep"
    Enabled: true
    Size: 8Gi
    StorageClass: <Provide the storageClass for DAI-Release>
  # https://docs.xebialabs.com/v.9.8/release/how-to/update-the-xl-release-digital-certificate/#view-the-certificate
  # Convert repository-keystore.jceks files content to base64
  # ( cat repository-keystore.jceks | base64 -w 0 ) and put the output here
  RepositoryKeystore: <Provide repositoryKeystore in base64 encoded form>
  UseExistingDB:
    Enabled: false
    # If you want to use a existing database.
    # Set 'postgresql.install' to 'false', Only when we use existing Database for both Release and keycloak.
    # Set 'UseExistingDB.Enabled' to 'true'.
    # Uncomment the following lines and provide the values.
    # XLR_DB_URL:
    # XLR_DB_USER:
    # XLR_DB_PASS:
    # XLR_REPORT_DB_URL:
    # XLR_REPORT_DB_USER:
    # XLR_REPORT_DB_PASS:
  UseExistingMQ:
    Enabled: false
    # If you want to use a existing Message Queue, change 'rabbitmq.install' to 'false'.
    # Set 'UseExistingMQ.Enabled' to 'true'.Uncomment the following lines and provide the values.
    # XLR_TASK_QUEUE_USERNAME:
    # XLR_TASK_QUEUE_PASSWORD:
    # XLR_TASK_QUEUE_NAME:
    # XLR_TASK_QUEUE_URL
  affinity: {}
  release:
    configurationManagement:
      configuration:
        enabled: true
        resetFiles: ## Resets part of the configuration files and license
          - xl-release-license.lic
          - xlr-wrapper-linux.conf
          - jmx-exporter.yaml
  keycloak:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 10 }}
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: NotIn
                  values:
                    - test
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "keycloak.selectorLabels" . | nindent 12 }}
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: NotIn
                    values:
                      - test
              topologyKey: failure-domain.beta.kubernetes.io/zone
    args: []
    autoscaling:
      behavior:
        scaleDown:
          policies:
            - periodSeconds: 300
              type: Pods
              value: 1
          stabilizationWindowSeconds: 300
      enabled: false
      labels: {}
      maxReplicas: 10
      metrics:
        - resource:
            name: cpu
            target:
              averageUtilization: 80
              type: Utilization
          type: Resource
      minReplicas: 3
    clusterDomain: cluster.local
    command: []
    enableServiceLinks: true
    extraContainers: ""
    extraEnv: |
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
      - name: KEYCLOAK_USER
        value: admin
      - name: KEYCLOAK_PASSWORD
        value: admin
      - name: JGROUPS_DISCOVERY_PROTOCOL
        value: dns.DNS_PING
      - name: JGROUPS_DISCOVERY_PROPERTIES
        value: 'dns_query={{ include "keycloak.serviceDnsName" . }}'
      - name: CACHE_OWNERS_COUNT
        value: "2"
      - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
        value: "2"
      - name: JAVA_OPTS
        value: >-
          -XX:+UseContainerSupport
          -XX:MaxRAMPercentage=50.0
          -Djava.net.preferIPv4Stack=true
          -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS
          -Djava.awt.headless=true
      - name: DB_VENDOR
        value: postgres
      - name: DB_ADDR
        value: {{ .Release.Name }}-postgresql
      - name: DB_PORT
        value: "5432"
      - name: DB_DATABASE
        value: keycloak
      - name: DB_USER
        value: keycloak
      - name: DB_PASSWORD
        value: keycloak
      - name: KEYCLOAK_IMPORT
        value: /realm/digitalai-platform-realm.json
    extraEnvFrom: ""
    extraInitContainers: ""
    extraPorts: []
    extraServiceMonitor:
      annotations: {}
      enabled: false
      interval: 10s
      labels: {}
      namespace: ""
      namespaceSelector: {}
      path: /auth/realms/master/metrics
      port: http
      scrapeTimeout: 10s
    extraVolumeMounts: |
      - name: realm-config
        mountPath: "/realm/"
        readOnly: true
    extraVolumes: |
      - name: realm-config
        configMap:
          name: {{ .Release.Name }}-realm
    fullnameOverride: ""
    global: {}
    hostAliases: []
    image:
      pullPolicy: IfNotPresent
      repository: docker.io/jboss/keycloak
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      console:
        annotations: {}
        enabled: false
        ingressClassName: ""
        rules:
          - host: 'keycloak.example.com'
            paths:
              - path: /auth/admin/
                pathType: Prefix
      enabled: false
      ingressClassName: ""
      labels: {}
      rules:
        - host: 'keycloak.example.com'
          paths:
            - path: /
              pathType: Prefix
      servicePort: http
      tls:
        - hosts:
            - keycloak.example.com
          secretName: ""
    install: true
    lifecycleHooks: ""
    livenessProbe: |
      httpGet:
        path: /auth/
        port: http
      initialDelaySeconds: 0
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      enabled: false
      extraFrom: []
      labels: {}
    nodeSelector: {}
    pgchecker:
      image:
        pullPolicy: IfNotPresent
        repository: docker.io/busybox
        tag: 1.32
      resources:
        limits:
          cpu: 20m
          memory: 32Mi
        requests:
          cpu: 20m
          memory: 32Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      fsGroup: 1000
    postgresql:
      audit:
        clientMinMessages: error
        logConnections: false
        logDisconnections: false
        logHostname: false
        logLinePrefix: ""
        logTimezone: ""
        pgAuditLog: ""
        pgAuditLogCatalog: "off"
      common:
        exampleValue: common-chart
        global:
          postgresql: {}
      commonAnnotations: {}
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraDeploy: []
      extraEnv: []
      global:
        postgresql: {}
      image:
        debug: false
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgresql
        tag: 11.11.0-debian-10-r31
      ldap:
        baseDN: ""
        bind_password: null
        bindDN: ""
        enabled: false
        port: ""
        prefix: ""
        scheme: ""
        search_attr: ""
        search_filter: ""
        server: ""
        suffix: ""
        tls: {}
        url: ""
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        extraEnvVars: {}
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgres-exporter
          tag: 0.9.0-debian-10-r6
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        prometheusRule:
          additionalLabels: {}
          enabled: false
          namespace: ""
          rules: []
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          enabled: false
          runAsUser: 1001
        service:
          annotations:
            prometheus.io/port: "9187"
            prometheus.io/scrape: "true"
          loadBalancerIP: null
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
      networkPolicy:
        allowExternal: true
        enabled: false
        explicitNamespacesSelector: {}
      persistence:
        accessModes:
          - ReadWriteOnce
        annotations: {}
        enabled: true
        mountPath: /bitnami/postgresql
        selector: {}
        size: 8Gi
        subPath: ""
      postgresqlDataDir: /bitnami/postgresql/data
      postgresqlDatabase: keycloak
      postgresqlDbUserConnectionLimit: null
      postgresqlMaxConnections: null
      postgresqlPassword: keycloak
      postgresqlPghbaRemoveFilters: null
      postgresqlPostgresConnectionLimit: null
      postgresqlSharedPreloadLibraries: pgaudit
      postgresqlStatementTimeout: null
      postgresqlTcpKeepalivesCount: null
      postgresqlTcpKeepalivesIdle: null
      postgresqlTcpKeepalivesInterval: null
      postgresqlUsername: keycloak
      primary:
        affinity: {}
        annotations: {}
        extraInitContainers: []
        extraVolumeMounts: []
        extraVolumes: []
        labels: {}
        nodeAffinityPreset:
          key: ""
          type: ""
          values: []
        nodeSelector: {}
        podAffinityPreset: ""
        podAnnotations: {}
        podAntiAffinityPreset: soft
        podLabels: {}
        priorityClassName: ""
        service: {}
        sidecars: []
        tolerations: []
      primaryAsStandBy:
        enabled: false
      psp:
        create: false
      rbac:
        create: false
      readReplicas:
        affinity: {}
        annotations: {}
        extraInitContainers: []
        extraVolumeMounts: []
        extraVolumes: []
        labels: {}
        nodeAffinityPreset:
          key: ""
          type: ""
          values: []
        nodeSelector: {}
        persistence:
          enabled: true
        podAffinityPreset: ""
        podAnnotations: {}
        podAntiAffinityPreset: soft
        podLabels: {}
        priorityClassName: ""
        resources: {}
        service: {}
        sidecars: []
        tolerations: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replication:
        applicationName: my_application
        enabled: false
        numSynchronousReplicas: 0
        password: repl_password
        readReplicas: 1
        synchronousCommit: "off"
        user: repl_user
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        enabled: true
        fsGroup: 1001
      service:
        annotations: {}
        port: 5432
        type: ClusterIP
      serviceAccount:
        enabled: false
      shmVolume:
        chmod:
          enabled: true
        enabled: true
      startupProbe:
        enabled: false
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
      tls:
        certCAFilename: null
        certFilename: ""
        certKeyFilename: ""
        certificatesSecret: ""
        crlFilename: null
        enabled: false
        preferServerCiphers: true
      updateStrategy:
        type: RollingUpdate
      volumePermissions:
        enabled: false
        image:
          pullPolicy: Always
          registry: docker.io
          repository: bitnami/bitnami-shell
          tag: "10"
        securityContext:
          runAsUser: 0
    priorityClassName: ""
    prometheusRule:
      annotations: {}
      enabled: false
      labels: {}
      rules: []
    rbac:
      create: false
      rules: []
    readinessProbe: |
      httpGet:
        path: /auth/realms/master
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
    replicas: 1
    resources: {}
    restartPolicy: Always
    route:
      annotations: {}
      enabled: true
      host: <Provide DNS name for accessing UI of Keycloak>
      labels: {}
      path: /
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
    secrets: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      httpManagementPort: 9990
      httpPort: 80
      httpsPort: 8443
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      sessionAffinity: ""
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      imagePullSecrets: []
      labels: {}
      name: ""
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: 10s
      labels: {}
      namespace: ""
      namespaceSelector: {}
      path: /metrics
      port: http-management
      scrapeTimeout: 10s
    startupProbe: |
      httpGet:
        path: /auth/
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
      failureThreshold: 60
      periodSeconds: 5
    startupScripts:
      keycloak.cli: |
        {{- .Files.Get "scripts/keycloak.cli" }}
    statefulsetAnnotations: {}
    statefulsetLabels: {}
    terminationGracePeriodSeconds: 60
    test:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: docker.io/unguiculus/docker-python3-phantomjs-selenium
        tag: v1
      podSecurityContext:
        fsGroup: 1000
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
    tolerations: []
    topologySpreadConstraints: null
  nodeSelector: {}
  oidc:
    accessToken:
      audience:
      enable: false
      issuer:
      jwsAlg:
      keyRetrievalUri:
      secretKey:
    accessTokenUri:
    clientAuthJwt:
      enable: false
      jwsAlg:
      keyStore:
        enable: false
        path:
        password:
        type:
      key:
        alias:
        enable: false
        password:
      tokenKeyId:
    clientAuthMethod:
    clientId:
    clientSecret:
    emailClaim:
    enabled: true
    external: false
    externalIdClaim:
    fullNameClaim:
    idTokenJWSAlg:
    issuer:
    keyRetrievalUri:
    logoutUri:
    postLogoutRedirectUri:
    proxyHost:
    proxyPort:
    redirectUri:
    rolesClaim:
    scopes: ["openid"]
    userAuthorizationUri:
    userNameClaim:
  postgresql:
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        postgresql:
          existingSecret: ""
          postgresqlDatabase: ""
          postgresqlPassword: ""
          postgresqlUsername: ""
          replicationPassword: ""
          servicePort: ""
        storageClass: ""
    commonAnnotations: {}
    configurationConfigMap: ""
    containerSecurityContext:
      enabled: false
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
        - infinity
      command:
        - sleep
      enabled: false
    existingSecret: ""
    extendedConfConfigMap: ""
    extraDeploy: []
    extraEnv: []
    extraEnvVarsCM: ""
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        existingSecret: ""
        postgresqlDatabase: ""
        postgresqlPassword: ""
        postgresqlUsername: ""
        replicationPassword: ""
        servicePort: ""
      storageClass: ""
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.13.0-debian-10-r73
    initdbPassword: ""
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    initdbScriptsSecret: postgresql-init-sql-xlr
    initdbUser: ""
    install: true
    ldap:
      baseDN: ""
      bind_password: ""
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: ""
      url: ""
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      customMetrics: {}
      enabled: false
      extraEnvVars: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.10.0-debian-10-r101
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: ""
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: <Provide Storage Class to be defined for PostgreSQL>
      subPath: ""
    pgHbaConfiguration: ""
    postgresqlConfiguration: {}
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: ""
    postgresqlDbUserConnectionLimit: ""
    postgresqlExtendedConf: {}
    postgresqlInitdbArgs: ""
    postgresqlInitdbWalDir: ""
    postgresqlMaxConnections: "150"
    postgresqlPassword: postgres
    postgresqlPghbaRemoveFilters: ""
    postgresqlPostgresConnectionLimit: ""
    postgresqlPostgresPassword: ""
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlStatementTimeout: ""
    postgresqlTcpKeepalivesCount: ""
    postgresqlTcpKeepalivesIdle: ""
    postgresqlTcpKeepalivesInterval: ""
    postgresqlUsername: postgres
    primary:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: []
      tolerations: []
    primaryAsStandBy:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    psp:
      create: false
    rbac:
      create: false
    readReplicas:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        enabled: true
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      resources: {}
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: []
      tolerations: []
      topologySpreadConstraints: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      singleService: true
      synchronousCommit: "off"
      uniqueServices: false
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: ""
      port: 5432
      type: ClusterIP
    serviceAccount:
      autoMount: false
      enabled: false
      name: ""
    shmVolume:
      chmod:
        enabled: false
      enabled: true
      sizeLimit: ""
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: false
      certCAFilename: ""
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: ""
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    usePasswordFile: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r233
      securityContext:
        runAsUser: auto
  rabbitmq:
    advancedConfiguration: ""
    affinity: {}
    args: []
    auth:
      erlangCookie: RELEASERABBITMQCLUSTER
      existingErlangSecret: ""
      existingPasswordSecret: ""
      password: guest
      tls:
        autoGenerated: false
        caCertificate: ""
        enabled: false
        existingSecret: ""
        existingSecretFullChain: false
        failIfNoPeerCert: true
        serverCertificate: ""
        serverKey: ""
        sslOptionsVerify: verify_peer
      username: guest
    clusterDomain: cluster.local
    clustering:
      addressType: hostname
      enabled: true
      forceBoot: true
      partitionHandling: autoheal
      rebalance: false
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        storageClass: ""
    commonAnnotations: {}
    communityPlugins: ""
    configuration: |-
      {{- if not .Values.loadDefinition.enabled -}}
      ## Username and password
      ##
      default_user = {{ .Values.auth.username }}
      default_pass = CHANGEME
      {{- end }}
      {{- if .Values.clustering.enabled }}
      ## Clustering
      ##
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
      cluster_formation.node_cleanup.interval = 10
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
      {{- end }}
      # queue master locator
      queue_master_locator = min-masters
      # enable guest user
      loopback_users.guest = false
      {{ tpl .Values.extraConfiguration . }}
      {{- if .Values.auth.tls.enabled }}
      ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
      listeners.ssl.default = {{ .Values.service.tlsPort }}
      ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
      ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
      ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
      ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
      {{- end }}
      {{- if .Values.ldap.enabled }}
      auth_backends.1 = rabbit_auth_backend_ldap
      auth_backends.2 = internal
      {{- range $index, $server := .Values.ldap.servers }}
      auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
      {{- end }}
      auth_ldap.port = {{ .Values.ldap.port }}
      auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
      {{- if .Values.ldap.tls.enabled }}
      auth_ldap.use_ssl = true
      {{- end }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
      ## Prometheus metrics
      ##
      prometheus.tcp.port = 9419
      {{- end }}
      {{- if .Values.memoryHighWatermark.enabled }}
      ## Memory Threshold
      ##
      total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
      vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
      {{- end }}
    containerSecurityContext: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
        - infinity
      command:
        - sleep
      enabled: false
    extraConfiguration: |
      load_definitions = /app/xlr-load_definition.json
      raft.wal_max_size_bytes = 1048576
    extraContainerPorts: []
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPlugins: rabbitmq_amqp1_0
    extraSecrets:
      xlr-load-definition:
        xlr-load_definition.json: |
          {
          "users": [
            {
                "name": "{{ .Values.auth.username }}",
                "password": "{{ .Values.auth.password }}",
                "tags": "administrator"
            }
            ],
          "vhosts": [
            {
              "name": "/"
            }
            ],
            "permissions": [
            {
              "user": "{{ .Values.auth.username }}",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
            ],
          "global_parameters": [
            {
              "name": "cluster_name",
              "value": ""
            }
            ],
           "policies": [
              {
                "name": "ha-all",
                "apply-to": "all",
                "pattern": ".*",
                "vhost": "/",
                "definition": {
                  "ha-mode": "all",
                  "ha-sync-mode": "automatic",
                  "ha-sync-batch-size": 1
                }
              }
            ]
          }
    extraSecretsPrependReleaseName: false
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/rabbitmq
      tag: 3.9.8-debian-10-r6
    ingress:
      annotations: {}
      enabled: false
      extraHosts: []
      extraTls: []
      hostname: rabbitmq.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    install: true
    kubeVersion: ""
    ldap:
      enabled: false
      port: "389"
      servers: []
      tls:
        enabled: false
      user_dn_pattern: cn=${username},dc=example,dc=org
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    loadDefinition:
      enabled: true
      existingSecret: xlr-load-definition
    logs: '-'
    maxAvailableSchedulers: ""
    memoryHighWatermark:
      enabled: false
      type: relative
      value: 0.4
    metrics:
      enabled: false
      plugins: rabbitmq_prometheus
      podAnnotations:
        prometheus.io/port: '{{ .Values.service.metricsPort }}'
        prometheus.io/scrape: "true"
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: 30s
        namespace: ""
        path: ""
        podTargetLabels: {}
        relabellings: []
        scrapeTimeout: ""
        targetLabels: {}
    nameOverride: ""
    networkPolicy:
      additionalRules: []
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    onlineSchedulers: ""
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 8Gi
      storageClass: <Storage Class to be defined for RabbitMQ>
      volumes: []
    plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    priorityClassName: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      annotationsHeadless: {}
      distNodePort: ""
      distPort: 25672
      distPortName: dist
      epmdNodePort: ""
      epmdPortName: epmd
      externalIPs: []
      externalTrafficPolicy: Cluster
      extraPorts: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      managerNodePort: ""
      managerPort: 15672
      managerPortEnabled: true
      managerPortName: http-stats
      metricsNodePort: ""
      metricsPort: 9419
      metricsPortName: metrics
      nodePort: ""
      port: 5672
      portEnabled: true
      portName: amqp
      tlsNodePort: ""
      tlsPort: 5671
      tlsPortName: amqp-ssl
      type: ClusterIP
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    statefulsetLabels: {}
    terminationGracePeriodSeconds: 120
    tolerations: []
    topologySpreadConstraints: []
    ulimitNofiles: "65536"
    updateStrategyType: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r233
      resources:
        limits: {}
        requests: {}
  replicaCount: 3
  resources: {}
  route:
    Enabled: true
    annotations:
      haproxy.router.openshift.io/cookie_name: JSESSIONID
      haproxy.router.openshift.io/disable_cookies: "false"
      haproxy.router.openshift.io/rewrite-target: /
    hosts:
      - <Provide DNS name for accessing UI of Digital.ai Release>
    path: /
  tolerations: []
  xlrLicense: <Provide license file for Digital.ai Release should be converted to the base64 form>
